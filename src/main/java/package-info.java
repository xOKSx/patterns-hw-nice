/*
 * Singleton:   класс Controller - точка входа в генератор, содержит логику получения входных значений для генерации,
 *              форму вывода информации и условия прекращения работы.
 *
 * Factory:     не применён - отсутствуют последовательности создания однотипных объектов.
 *              Для фиксации сложных алгоритмов создания объектов фабрика изначально используется в коде.
 *              Для класса Person вместо фабрики был применен билдер.
 *
 * Builder:     класс PersonBuilder - упрощение создания экземпляра Person с набором параметров, билдер поддерживает вариативность.
 *
 * Adapter:     не применён - отсутствуют несовместимые объекты.
 *
 * Bridge:      не применён - нет сложных схем наследуемых классов, в некоторой степени изначально реализовано в генераторах.
 *
 * Facade:      абстрактный класс Generator - упрощение вызова рабочих методов генераторов
 *              (последовательность методов заменятся одним); изначально используется в коде.
 *
 * DTO:         класс Fio - облегчение контроля за передачей между объектами и использования связанного набора данных.
 *              классы Phone, Physical, Appearance приведены к аналогичному виду.
 *
 * Шаблон:      абстрактный класс Generator - фиксация принципов работы генераторов:
 *              все генераторы работают по одному алгоритму, отличающемуся реализацией методов.
 */